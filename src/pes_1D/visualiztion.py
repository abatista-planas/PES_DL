import matplotlib.pyplot as plt
import numpy as np
import numpy.typing as npt
import pandas as pd
from sklearn.metrics import confusion_matrix  # type: ignore


def plot_confusion_matrix(y_true, y_pred, title="Confusion Matrix"):
    """Plots the confusion matrix for the given true and predicted labels."""

    # Compute the confusion matrix
    cm = confusion_matrix(y_true, y_pred)

    # Print the confusion matrix
    print("Confusion Matrix: ", title)
    print(cm)

    # Visualize the confusion matrix
    plt.imshow(cm, interpolation="nearest", cmap=plt.cm.Blues)
    plt.title(title)
    plt.colorbar()
    classes = np.unique(y_true)
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes)
    plt.yticks(tick_marks, classes)
    plt.xlabel("Predicted Label")
    plt.ylabel("True Label")

    # Add text annotations to the plot
    thresh = cm.max() / 2.0
    for i, j in np.ndindex(cm.shape):
        plt.text(
            j,
            i,
            cm[i, j],
            horizontalalignment="center",
            color="white" if cm[i, j] > thresh else "black",
        )

    plt.tight_layout()
    plt.show()


def sample_visualization(
    df_samples: pd.DataFrame,
    nrow: int = 2,
    ncol: int = 2,
    index_array: npt.NDArray[np.int8] = np.array([]),
):
    """Visualizes the samples generated by the DataGenerator"""

    fig, axs = plt.subplots(nrow, ncol)
    count = 0
    if index_array.size == 0:
        index_array = np.arange(len(df_samples))
    for i in range(nrow):
        for j in range(ncol):
            df_samples["pes"][index_array[count]].plot(ax=axs[i][j], x="r", y="energy")
            count = count + 1
    plt.show()
